name: PR Backend Tests

# Trigger the workflow on pull requests to master branch
on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    # Service containers to run with `backend-tests`
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: user_management_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Step 1: Checkout the User Management System repository
    - name: Checkout User Management System
      uses: actions/checkout@v4
      with:
        path: user-management-system

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Cache Maven dependencies for performance
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('user-management-system/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Step 4: Build and start the User Management System application
    - name: Build User Management System
      working-directory: user-management-system
      run: |
        mvn clean compile -DskipTests
        echo "Application built successfully"

    # Step 5: Start the application in background
    - name: Start User Management System
      working-directory: user-management-system
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/user_management_db_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      run: |
        mvn spring-boot:run &
        echo "Starting User Management System..."
        
        # Wait for application to be ready
        echo "Waiting for application to start..."
        for i in {1..60}; do
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "Application is ready!"
            break
          fi
          echo "Waiting... ($i/60)"
          sleep 5
        done
        
        if ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
          echo "Application failed to start within timeout"
          exit 1
        fi
        
        # Verify API is accessible
        echo "Testing API endpoints..."
        curl -f http://localhost:8080/actuator/health || exit 1
        echo "Application is ready for testing!"

    # Step 6: Checkout the external test repository
    - name: Checkout Backend Test Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/backend-automation-framework
        token: ${{ secrets.GITHUB_TOKEN }}
        path: backend-tests
        # Note: If backend-automation-framework is private, you may need to:
        # 1. Create a Personal Access Token with repo permissions
        # 2. Add it as a repository secret (e.g., PAT_TOKEN)
        # 3. Replace ${{ secrets.GITHUB_TOKEN }} with ${{ secrets.PAT_TOKEN }}

    # Step 7: Set up test environment and run tests
    - name: Run Backend Tests
      working-directory: backend-tests
      env:
        # Test configuration
        BASE_URL: http://localhost:8080
        TEST_USERNAME: admin
        TEST_PASSWORD: admin123
        DB_URL: jdbc:postgresql://localhost:5432/user_management_db_test
        DB_USERNAME: test_user
        DB_PASSWORD: test_password
      run: |
        echo "Setting up test environment..."
        
        # Install dependencies (if using Maven)
        if [ -f "pom.xml" ]; then
          mvn clean compile -DskipTests
        fi
        
        # Install dependencies (if using Gradle)
        if [ -f "build.gradle" ]; then
          ./gradlew build -x test
        fi
        
        echo "Running backend tests..."
        
        # Run tests based on project type
        if [ -f "pom.xml" ]; then
          mvn test -Dtest.baseUrl=http://localhost:8080 -Dtest.timeout=60000
        elif [ -f "build.gradle" ]; then
          ./gradlew test --tests="*Integration*" -Dtest.baseUrl=http://localhost:8080
        else
          echo "No recognized build file found (pom.xml or build.gradle)"
          exit 1
        fi

    # Step 8: Upload test results
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend-tests/target/surefire-reports/
          backend-tests/build/test-results/
          backend-tests/test-output/
        retention-days: 30

    # Step 9: Publish test results (optional)
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests
        path: |
          backend-tests/target/surefire-reports/*.xml
          backend-tests/build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: true

    # Step 10: Comment PR with test results
    - name: Comment PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const fs = require('fs');
          const { context, github } = require('@actions/core');
          
          // Create comment based on test results
          let comment = '## Backend Test Results\n\n';
          
          if (process.env.GITHUB_JOB_STATUS === 'success') {
            comment += 'All backend tests passed!\n\n';
            comment += 'The PR is ready for review.';
          } else {
            comment += 'Some backend tests failed.\n\n';
            comment += 'Please check the test results and fix the issues before merging.';
          }
          
          comment += '\n\n[View detailed test results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Optional: Build verification job
  build-verification:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run unit tests
      run: mvn test

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-jar
        path: target/*.jar
        retention-days: 7
